1. Find the difference between the sum of the squares of the first hundred natural numbers, and the square of the sum.



2. sum of Multiples:                                                * PASSED
Find the sum of all the multiples of 3 or 5, below 1000
var sum = 0;
for (var x = 0; x < 1000; x++)
{
    if (x % 3 === 0 || x % 5 === 0)
    {
       sum += x;
    }
}
console.log(sum);
//////////////////////////////
sum of Multiples:
var splitString = input.split(' ');
    var n1= parseInt(splitString[0]);
    var n2= parseInt(splitString[1]);
     
    var eventEmitter = new EventEmitter();
    var sum = 0;
    for (var x = 0; x <= 1000; x++)
    {
        if(x % n1 == 0){
            sum += x;
        }
        if(x % n2 == 0){
            sum += x;
        }
        
    }
    
    eventEmitter.on('MyEvent', logInfo);
    
    function logInfo(input){
            console.log("Multiples of " + n1 + " & " + n2);
            console.log(sum);
    }
        eventEmitter.emit('MyEvent', "");
/////////////////////////////////////////////////////

function largestPrimeFactor(n) {
   var i = 2;
   while (i <= n) {
      if (n % i == 0) {
         n /= i;
      } else {
         i++;
      }
   }
   console.log(i);
}

////// FIB ////////////////////
let fib = []; 
////// PALINDROME 
const isPalindrome = val => {
    let og = val /// store the original number

    let reversedVal = parseInt(val.toString().split('').reverse().join(''))
    // val.toString()   /// convert value to string - because strings can be split into an array
    //.split('')        /// split the string at '' (nothing) - returns the split array
    //.reverse()        /// reverse the array
    //.join()           /// join the array elements at a character '' (nothing)
    // parseInt(...)    /// wrap all in parse in to extract the integer from the string
    return og === reversedVal
}

//- Find the largest 3 digit numbers whose product creates a palindrome


let arr = []

for(let i = 100; i < 1000; i++){
    for(let x = 100; x < 1000; x++){
        // console.log(`product of: ${i} x ${x}`)
        isPalindrome(i * x) && arr.push(i*x)
        //- SHORT CIRCUIT
        /// if the first part of an AND is false - the comparison quits - never executes the second half
        /// if the first part of an AND is true - it wi
From Michael Jannetta to Everyone:  05:10 PM
ll execute the second hald
    }
}

let maxThreeDigitPalindrome = Math.max(...arr)

console.log(maxThreeDigitPalindrome)
////////////////////////////////////////////////////
If the string is palindrome then print true or else print false.
Palindrome
process.stdin.resume();
process.stdin.setEncoding("ascii");
var input = "";
process.stdin.on("data", function (chunk) {
    input += chunk;
});


process.stdin.on("end", function (input) {
  function isPalindrome(val){
    let original = val 

    let reversedVal = val.split('').reverse().join('')

    return (original.toLowerCase() === reversedVal.toLowerCase()).toString()

       
   }
   process.stdout.write(isPalindrome(input));
   //process.stdout.write(input.toString());

});
///////////////////////////////////////////////
Evently divisible Number
function smallestMult(n) {
    // setup state
    let inc = 2;
    let step = 2;
    let smallestNum = 2;

      // loop over all numbers until we find the right one.
      // The sky is the limit!
    while (smallestNum <= Number.MAX_SAFE_INTEGER) {
        console.log(`smallestNum: ${smallestNum}`)


          // start from our step value
      for (let i = 2; i <= n; i++) {
              // check if its divisible
              // console.log(`${smallestNum} % ${i}`)
        const divisible = smallestNum % i === 0;
        // if it is not divisible, skip to the next number
        if (!divisible) {
            console.log('break ----------------------------------------------')
          break;
        }
              // if it is divisible, increase our step to be our next num
        if (i === inc) {
            // console.log(`set step:  ${smallestNum}`)
          step = smallestNum;
          // increase our global incrementer by 1
          inc++;
        }
              // check if i is equal to our las
console.log(smallestMult(20))
////////////////////////////////////////////////////
PASS
Find the difference between the sum of the squares of the first hundred numbers, and the square of the sum.

let sum = 0
let squared = 0
let result = 0

for(let i = 1; i <= 100; i++){
    sum += i
    squared += i * i
}

result = sum * sum - squared

console.log(result)
///////////////////////////////////
PASS
in a list of the first 6 prime numbers: 2, 3, 5, 7, 11, and 13, the 6th prime number is 13.
What is the 10001st prime number?

function isPrime(num) {
    for ( var i = 2; i < num; i++ ) {
        if ( num % i === 0 ) {
            return false;
        }
    }
    return true;
}


var arr = [2];

for ( var i = 3; i < 200000; i+=2 ) {
    if ( isPrime(i) ) {
        arr.push(i);
    }
}

console.log(arr[10000])
/////////////////////////////////////
PASS
A pythagorean triplet is a set of three natural numbers, a<b<c, for which, a2+b2=c2.
For a pythagorean triplet where a + b + c = 1000, find the product of abc.

let 
a = 0, 
b = 0, 
c = 0;
let found = false;
let result = null

const s = 1000;


for (a = 1; a < s / 3; a++) {
    for (b = a; b < s / 2; b++) {
        c = s - a - b;
 
        if ((a * a) + (b * b) == (c * c)) {
            result = a * b * c
            break;
        }
    }
}

console.log(result)
///////////////////////////////////////////////////////
Events - Working with files


//import the 'fs' and 'maths.js' module
const fs = require("fs")
const math = require("./maths.js")
//read the content of 'input.txt' file and copy the content to 'duplicate.txt' file

fs.copyFile('input.txt', 'duplicate.txt', (err) => {
  if (err) throw err;
  console.log('input.txt was copied to duplicate.txt');
});

//call the 'sum and 'multiply' functions of maths module and store the return values in 'result' and 'product' variables

let result = math.sum(2,3);
let product = math.multiply(2,3);

//write the content 'The sum of the numbers is: result. The product of the numbers is: product' to the 'output.txt' file
let string = `The sum of the numbers is: ${result}. The product of the numbers is: ${product}`;
fs.writeFile('output.txt', string, (err) => {
  if (err) throw err;
  console.log('input.txt writed to duplicate.txt');
});
//////////////////////////////////
Copy Stream


const fs = require('fs')

var readable = fs.createReadStream(__dirname + '/data_file.txt', { encoding: 'utf8'});

var writable = fs.createWriteStream(__dirname + '/new_data_file.txt');

readable.pipe(writable);
///////////////////////////////////////
Working with timers:
function Description
compleate the function "logString" in the editor below. "logString" has the following parameters

   const EventEmitter = require('events');
   
   process.stdin.on("end", function () {
    var splitString = input.split(' ');
    var n1= parseInt(splitString[0]);
    var n2= parseInt(splitString[1]);
     
  var eventEmitter = new EventEmitter(); 

    function findSum (cb){ 
        var sum = 0; 
        for (var x = 0; x <= 1000; x++) 
        { if(x % n1 == 0){ sum += x; } 
        if(x % n2 == 0){ sum += x; } 
        } 
        cb(sum)
    } 

    function delayedFunc(x){
        setTimeout(()=>console.log(x), 2000);
    }

    findSum(delayedFunc); 

    eventEmitter.on('MyEvent', logInfo); 

    function logInfo(input){ 
        console.log(`Multiples of ${n1} & ${n2}`) 
    } 
    
    eventEmitter.emit('MyEvent', "");

});

/////////////////////////////////////
Find the Sum of all the Primes below 2 million
   function sumOfPrime(x) {
        var array = [];
         sum=0;
        for (var i=2; i<x; i++) {
            if(typeof array[i] === 'undefined') {
                array[i]=true;
                for(var j = (i+i); j<x; j+=i) {
                    array[j]=false;
                }
                if (array[i]) {
                    sum+=i;
                }
            }
        }
        return sum;
    }

    console.log(sumOfPrime(2000000));
//////////////////////////////////////
The variable input has the value. Extract n1 and n2 from the input.
Write a function to find the sum of all multiples of n1 and n2, below and including 1000. This function should log the sum after 2 seconds.
 
process.stdin.on("end",function() {

});
////////////////////////////////////////////
2520 is the smallest number that can be divided by each of the numbers from 1 to 10, without any remainder.

What is the smallest positive number that is evenly divisible from 1 to 20?
function smallestDivisible(limit) {
    var i, n = 1;

    function largestPower(n, limit) {
        var p, e = 2, largest = n;
        while ((p = Math.pow(n, e)) <= limit) {
            largest = p;
            e += 1;
        }
        return largest;
    }

    function isPrime(n) {
        var i, limit = Math.ceil(Math.sqrt(n));
        // since the main loop generates odd numbers only
        // we can start testing primality dividing by 3
        for (i = 3; i <= limit; i += 2) {
            if (n % i === 0) {
                return false;
            }
        }
        return true;
    }

    for (i = 3; i <= limit; i += 2) {
        if (isPrime(i)) {
            n *= largestPower(i, limit);
        }
    }

    return n * largestPower(2, limit);
}

console.log(smallestDivisible(20));
////////////////////////////////////////////////////
var http = require('http');
const url = require('url');
const express = require('express');
const app =express()
//write your code here

const port = 8000;

app.get('/cal', (req,res)=> { 
     //console.log(req.query.func) 
     let a = parseInt(req.query.a)
     let b = parseInt(req.query.b)

     switch(req.query.func){
         case 'add':{
            res.send(`Addition is: ${a+b}`)
         };break;
         case 'subtract':{
            res.send(`Subtraction is: ${a-b}`)
        };break;
        case 'multiple':{
            res.send(`Multiple is: ${a*b}`)
        };break;
     }
}); 

app.post('/cal', (req,res)=> { 
    //console.log(req.query.a) 
    let a = parseInt(req.query.a)
    let b = parseInt(req.query.b)
    res.send(`Division is: ${a/b}`)

}); 


app.listen(port, ()=> {
  //console.log("Server is running on port ", port);
})

.....ERROR
On branch master
Your branch is ahead of 'origin/master' by 3 commits.
(use "git push" to publish your local commits)

nothing to commit, working tree clean
remote: [31m_______________________________________________________________________
remote: ___ __ __ __ __
remote: |__ |__) |__) / \ |__)
remote: |___ | \ | \ \__/ | \
remote:
remote: Attempting to modify read only files:
remote: package.json
remote: _______________________________________________________________________[0m
To https://git-rba.hackerrank.com/git/2bec7be7-7aee-40d1-92e0-95dc38c045dd
! [remote rejected] master -> master (pre-receive hook declined)
error: failed to push some refs to 'https://git-rba.hackerrank.com/git/2bec7be7-7aee-40d1-92e0-95dc38c045dd'

